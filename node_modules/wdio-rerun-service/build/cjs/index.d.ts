import type { Capabilities, Frameworks, Services } from '@wdio/types';
type AfterScenario = NonNullable<WebdriverIO.HookFunctionExtension['afterScenario']>;
type AfterScenarioParameters = Parameters<AfterScenario>;
type World = AfterScenarioParameters[0];
interface NonPassingItem {
    location: string;
    failure?: string | undefined;
}
interface RerunServiceOptions {
    ignoredTags?: string[];
    rerunDataDir?: string;
    rerunScriptPath?: string;
    commandPrefix?: string;
    customParameters?: string;
}
export default class RerunService implements Services.ServiceInstance {
    nonPassingItems: NonPassingItem[];
    serviceWorkerId: string;
    ignoredTags: string[];
    rerunDataDir: string;
    rerunScriptPath: string;
    commandPrefix: string;
    customParameters: string;
    specFile: string;
    disabled: boolean;
    constructor(options?: RerunServiceOptions);
    before(_capabilities: Capabilities.RemoteCapability, specs: string[]): Promise<void>;
    afterTest(_test: Frameworks.Test, _context: any, results: Frameworks.TestResult): void;
    afterScenario(world: World): void;
    after(): Promise<void>;
    onComplete(): Promise<void>;
}
export {};
